from pulp import *
import numpy as np

# Объем СМР
A = np.array([[10, 3, 12, 13],
              [16, 18, 20, 22],
              [37, 25, 33, 28],
              [70, 33, 45, 36]])
# Кол-во рабочих
B = np.array([10, 20, 30, 40])
# объём СМР на объектах с 1 - 17
xi = []
for i in range(16):
    xi.append(i)

x = pulp.LpVariable.dict('x', xi, lowBound=0, cat='Binary')
problem = LpProblem('0', LpMaximize)
# Целевая
problem += A[0][0] * x[0] + A[0][1] * x[1] + A[0][2] * x[2] + A[0][3] * x[3] \
           + A[1][0] * x[4] + A[1][1] * x[5] + A[1][2] * x[6] + A[1][3] * x[7] \
           + A[2][0] * x[8] + A[2][1] * x[9] + A[2][2] * x[10] + A[2][3] * x[11] \
           + A[3][0] * x[12] + A[3][1] * x[13] + A[3][2] * x[14] + A[3][3] * x[15]
# Ограничение по рабочим на объекте (сумма по столбцам равна или меньше единицы)
problem += x[0] + x[4] + x[8] + x[12] <= 1
problem += x[1] + x[5] + x[9] + x[13] <= 1
problem += x[2] + x[6] + x[10] + x[14] <= 1
problem += x[3] + x[7] + x[11] + x[15] <= 1
# Ограничение на итоговый состав рабочих (чтобы не было больше 40 рабочих,
# отталкиваясь от того, какое будет распределение)
problem += B[0] * x[0] + B[0] * x[1] + B[0] * x[2] + B[0] * x[3] +\
           B[1] * x[4] + B[1] * x[5] + B[1] * x[6] + B[1] * x[7] +\
           B[2] * x[8] + B[2] * x[9] + B[2] * x[10] + B[2] * x[11] +\
           B[3] * x[12] + B[3] * x[13] + B[3] * x[14] + B[3] * x[15] <= 40
problem.solve()
print("Оптимальное распределение:")
k = 10
for i in [0, 4, 8, 12]:
    print(k, "|", x[i].value(), " ", x[i+1].value(), " ", x[i+2].value(), " ", x[i+3].value(), ' |')
    k += 10
print("Максимальный объем СМР:")
print(value(problem.objective))