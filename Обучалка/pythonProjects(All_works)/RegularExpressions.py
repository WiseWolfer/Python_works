import re

from functools import reduce
##Регулярные выражения
#
# s ='AC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DC'
# #Поиск соответвствия в начале строки
# result = re.match('AC', s)
# #Поиск соответвствия во всей строке нужной строки(выводит первое)
# result = re.search('DC',s)
# print(result)
# ##выведет только сами символы из строки
# print(result[0])
# ## Помещает все значения DC в список
# result = re.findall('DC', s)
# print(result)
# ##разбиваем строку и записываем в список, по заданному символу
# result = re.split('/', s)
# print(result)
# #разбиваем строку и записываем в список, по заданному символу, заданное число
# # раз, а остальное просто добавится в список
# result = re.split('/', s, maxsplit = 3)
# print(result)
# #заменяем указанный символ в нашей строке s на заменяемый(второй символ)
# result = re.sub('A', 'D', s)
# print(result)
# #является ли строчка имеется нашим шаблоном,если вся строка А
# # (то выведет совпадения)
# #если нет, то будет None
# s = 'B'
# result = re.fullmatch('A', s)
# print(result)
#
# s = "87+6844654  --- kjgngfbi312798219497412 HJKLHGMfffggg"
# # r - отключено экранирование(сырая строка), отключение табуляции
# # . - любой символ, кроме новой строки
# result = re.search(r"k.g",s)
# \d - любая цифра
# \D - любой символ, кроме цифры
# \s - любой пробельный символ
# \S - любой непробельный символ
# \w - выводит буквы, цифры, нижние подчеркивания
# \W - ищет все кроме: любая буква, цифра, нижнего подчеркивания
# \b - ищет начало или конец какого-либо слова
# \B - не укажет нам границы слова (начало и конец слова)
# \d* выведет 0 или более вхождений после найденной цифры
# \d+ - покажет 1 или более вхождений
# "[какой-то набор букв]" - ищет среди них вхождение
# также можно указывать в скобках диапазон для поиска
# "[^4-6]" выведет все цифры кроме цифр 4,5,6
# "H|f" - выведет тот символ, который найдет первее
# указываем сколько цифр надо выводить "\d{3}" - число повторений,
# например 3 цифры
#"\d{1,3}" - указываем сколько повторений цифр, в моем случае от 1 до 3x
# "\d{4,} - указываем не менее 4x повторений цифр"
# "\d{,4} - указываем не более 4x повторений цифр"
# result = re.search(r"\d{,4}",s)
# print(result)
##Пример
# s = "Привет! Как дела? А у меня нормально"
# result =re.findall(r'[бвгджзклмнпрстфхцчшщБВГДЖЗКЛМНПРСТФХЦЧШЩ]\w+',s)
# print(result)
# ##Lambda функции
# print((lambda a, b: a * b)(17,20))
# print((lambda a, b: a if a > b else b)(25,14))

# Задачи для тренировки:
# 1) Написать lambda-функцию, принимающую 1 аргумент — сторону квадрата,
# и возвращающую периметр квадрата.
# 2) Написать lambda-функцию, которая выводит среднее арифметическое 3 чисел.
#1
# print((lambda a: 4 * a)(4))
# #2
# a = int(input("Введите 1 число: "))
# b = int(input("Введите 2 число: "))
# c = int(input("Введите 3 число: "))
# print((lambda a, b, c: round((a + b + c)/3))(a, b, c))

# Задание:
# Создать текстовый файл (.txt) средствами
# вашей операционной системы, заполнить его любыми цифрами в 1 столбик.
# Затем написать программу, в которой при помощи функции map считать
# все эти цифры в один список.
# Затем, используя функцию filter, создать новый список,
# в котором останутся только нечетные цифры из предыдущего списка.


# filter() - помогает отфильтровать по условию данные и записвть в список
# map() - помогает, например, прочитать файл и записать содержимое в список
def fu(b):
    if b % 2 != 0:
        return b

with open("Test.txt") as f:
        a = list(map(int, f))
        # b= list(filter(fu, a)
        b = list(filter(lambda a: (a % 2 != 0), a))
print("Список со всеми числами: " + str(a))
print("Список только с нечетными из предыдущего: " + str(b))

mixed =['мармелад', 'абрикос', 'ситро', 'мапмелад']
proba = list(filter(lambda x: x == 'мармелад', mixed))
print(proba)


#reduce() принимает 2 аргумента, нужно ее подключить из functiontools
#можно использовать,например, для поиска макс. элемента
items = [1, 24, 17, 14, 9, 32, 2]
all_max = reduce(lambda a, b: a if (a > b) else b, items)
print(all_max)

#объединяет в картежи элементы из последовательности
a = [1, 2, 3]
b = "xyz"
c = (None, True, False)

res = list(zip(a, b, c))
print(res)
